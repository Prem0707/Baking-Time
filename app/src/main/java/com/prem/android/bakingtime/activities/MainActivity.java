package com.prem.android.bakingtime.activities;

import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;

import com.prem.android.bakingtime.R;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;

import fragment.SelectRecipe;
import models.Recipe;
import utils.NetworkUtils;

public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<ArrayList<Recipe>> {

    public static ArrayList<Recipe> mRecipe;
    public static final int RECIPE_LOADER = 100;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //create SelectRecipe fragment
        SelectRecipe fragmentRecipe = new SelectRecipe();

        //add the fragment to its container using fragmentmanager and transaction
        FragmentManager fragmentManager = getSupportFragmentManager();

        fragmentManager.beginTransaction()
                .add(R.id.view_holder_for_select_recipe, fragmentRecipe)
                .commit();

        LoaderManager loaderManager = getSupportLoaderManager();
        Loader<ArrayList<Recipe>> recipeLoader = loaderManager.getLoader(RECIPE_LOADER);
        if(recipeLoader == null)
        {
            loaderManager.initLoader(RECIPE_LOADER,null , this);
        }else{
            loaderManager.restartLoader(RECIPE_LOADER,null , this);
        }
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<ArrayList<Recipe>> onCreateLoader(int id, final Bundle args) {
        return new AsyncTaskLoader<ArrayList<Recipe>>(this) {

            @Override
            public void onStartLoading(){
                super.onStartLoading();
                if(args == null){
                    return;
                }
            }

            /**
             * Called on a worker thread to perform the actual load and to return
             * the result of the load operation.
             *
             * @return The result of the load operation.
             */
            @Override
            public ArrayList<Recipe> loadInBackground() {
                try {
                    URL recipeURL = NetworkUtils.buildURL();
                    String responceforRecipe = NetworkUtils.getResponseFromHttpUrl(recipeURL);
                }catch (IOException e){
                    e.printStackTrace();
                    return null;
                }
             return null;
            }
        };
    }


    /**
     * Called when a previously created loader has finished its load.
     * The Loader will release the data once it knows the application
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<ArrayList<Recipe>> loader, ArrayList<Recipe> data) {

    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<ArrayList<Recipe>> loader) {

    }
}
